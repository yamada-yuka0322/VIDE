/** @file generateMock_conf.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.5
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef GENERATEMOCK_CONF_H
#define GENERATEMOCK_CONF_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef GENERATEMOCK_CONF_PACKAGE
/** @brief the program name (used for printing errors) */
#define GENERATEMOCK_CONF_PACKAGE "generateMock"
#endif

#ifndef GENERATEMOCK_CONF_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define GENERATEMOCK_CONF_PACKAGE_NAME "generateMock"
#endif

#ifndef GENERATEMOCK_CONF_VERSION
/** @brief the program version */
#define GENERATEMOCK_CONF_VERSION "0"
#endif

/** @brief Where the command line options are stored */
struct generateMock_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * configFile_arg;	/**< @brief Configuration file path.  */
  char * configFile_orig;	/**< @brief Configuration file path original value given at command line.  */
  const char *configFile_help; /**< @brief Configuration file path help description.  */
  char * ramsesBase_arg;	/**< @brief Base directory for ramses.  */
  char * ramsesBase_orig;	/**< @brief Base directory for ramses original value given at command line.  */
  const char *ramsesBase_help; /**< @brief Base directory for ramses help description.  */
  int ramsesId_arg;	/**< @brief Ramses snapshot id.  */
  char * ramsesId_orig;	/**< @brief Ramses snapshot id original value given at command line.  */
  const char *ramsesId_help; /**< @brief Ramses snapshot id help description.  */
  char * gadget_arg;	/**< @brief Base name of gadget snapshot (without parallel writing extension).  */
  char * gadget_orig;	/**< @brief Base name of gadget snapshot (without parallel writing extension) original value given at command line.  */
  const char *gadget_help; /**< @brief Base name of gadget snapshot (without parallel writing extension) help description.  */
  char * gadget2_arg;	/**< @brief Base name of gadget snapshot (version 2, without parallel writing extension).  */
  char * gadget2_orig;	/**< @brief Base name of gadget snapshot (version 2, without parallel writing extension) original value given at command line.  */
  const char *gadget2_help; /**< @brief Base name of gadget snapshot (version 2, without parallel writing extension) help description.  */
  char * flash_arg;	/**< @brief Base name for FLASH snapshot.  */
  char * flash_orig;	/**< @brief Base name for FLASH snapshot original value given at command line.  */
  const char *flash_help; /**< @brief Base name for FLASH snapshot help description.  */
  char * multidark_arg;	/**< @brief Base name for multidark snapshot.  */
  char * multidark_orig;	/**< @brief Base name for multidark snapshot original value given at command line.  */
  const char *multidark_help; /**< @brief Base name for multidark snapshot help description.  */
  char * sdf_arg;	/**< @brief SDF snapshot name.  */
  char * sdf_orig;	/**< @brief SDF snapshot name original value given at command line.  */
  const char *sdf_help; /**< @brief SDF snapshot name help description.  */
  int sdf_splitting_arg;	/**< @brief Number of artificial splitting of the SDF snapshot (default='20').  */
  char * sdf_splitting_orig;	/**< @brief Number of artificial splitting of the SDF snapshot original value given at command line.  */
  const char *sdf_splitting_help; /**< @brief Number of artificial splitting of the SDF snapshot help description.  */
  int axis_arg;	/**< @brief Redshift axis (X=0, Y=1, Z=2) (default='2').  */
  char * axis_orig;	/**< @brief Redshift axis (X=0, Y=1, Z=2) original value given at command line.  */
  const char *axis_help; /**< @brief Redshift axis (X=0, Y=1, Z=2) help description.  */
  char * output_arg;	/**< @brief Output filename for particles.  */
  char * output_orig;	/**< @brief Output filename for particles original value given at command line.  */
  const char *output_help; /**< @brief Output filename for particles help description.  */
  char * outputParameter_arg;	/**< @brief Output geometry parameter file for postprocessing.  */
  char * outputParameter_orig;	/**< @brief Output geometry parameter file for postprocessing original value given at command line.  */
  const char *outputParameter_help; /**< @brief Output geometry parameter file for postprocessing help description.  */
  double rangeX_min_arg;	/**< @brief Minimum range in X for making the box.  */
  char * rangeX_min_orig;	/**< @brief Minimum range in X for making the box original value given at command line.  */
  const char *rangeX_min_help; /**< @brief Minimum range in X for making the box help description.  */
  double rangeX_max_arg;	/**< @brief Maximum range in X for making the box.  */
  char * rangeX_max_orig;	/**< @brief Maximum range in X for making the box original value given at command line.  */
  const char *rangeX_max_help; /**< @brief Maximum range in X for making the box help description.  */
  double rangeY_min_arg;	/**< @brief Minimum range in Y for making the box.  */
  char * rangeY_min_orig;	/**< @brief Minimum range in Y for making the box original value given at command line.  */
  const char *rangeY_min_help; /**< @brief Minimum range in Y for making the box help description.  */
  double rangeY_max_arg;	/**< @brief Maximum range in Y for making the box.  */
  char * rangeY_max_orig;	/**< @brief Maximum range in Y for making the box original value given at command line.  */
  const char *rangeY_max_help; /**< @brief Maximum range in Y for making the box help description.  */
  double rangeZ_min_arg;	/**< @brief Minimum range in Z for making the box (after distortion).  */
  char * rangeZ_min_orig;	/**< @brief Minimum range in Z for making the box (after distortion) original value given at command line.  */
  const char *rangeZ_min_help; /**< @brief Minimum range in Z for making the box (after distortion) help description.  */
  double rangeZ_max_arg;	/**< @brief Maximum range in Z for making the box (after distortion).  */
  char * rangeZ_max_orig;	/**< @brief Maximum range in Z for making the box (after distortion) original value given at command line.  */
  const char *rangeZ_max_help; /**< @brief Maximum range in Z for making the box (after distortion) help description.  */
  int preReShift_flag;	/**< @brief Reshift the zero of the Z axis (default=off).  */
  const char *preReShift_help; /**< @brief Reshift the zero of the Z axis help description.  */
  int peculiarVelocities_flag;	/**< @brief Added peculiar velocities distortion (default=off).  */
  const char *peculiarVelocities_help; /**< @brief Added peculiar velocities distortion help description.  */
  int cosmo_flag;	/**< @brief Apply cosmological redshift (default=off).  */
  const char *cosmo_help; /**< @brief Apply cosmological redshift help description.  */
  double subsample_arg;	/**< @brief Subsample the input simulation by the specified amount (default='1.0').  */
  char * subsample_orig;	/**< @brief Subsample the input simulation by the specified amount original value given at command line.  */
  const char *subsample_help; /**< @brief Subsample the input simulation by the specified amount help description.  */
  char * inputParameter_arg;	/**< @brief Input geometry (optional, warning!).  */
  char * inputParameter_orig;	/**< @brief Input geometry (optional, warning!) original value given at command line.  */
  const char *inputParameter_help; /**< @brief Input geometry (optional, warning!) help description.  */
  double gadgetUnit_arg;	/**< @brief Unit of length in gadget file in Mpc/h (default='0.001').  */
  char * gadgetUnit_orig;	/**< @brief Unit of length in gadget file in Mpc/h original value given at command line.  */
  const char *gadgetUnit_help; /**< @brief Unit of length in gadget file in Mpc/h help description.  */
  int subsample_seed_arg;	/**< @brief Seed for random number generation to select the subsample (default='190524').  */
  char * subsample_seed_orig;	/**< @brief Seed for random number generation to select the subsample original value given at command line.  */
  const char *subsample_seed_help; /**< @brief Seed for random number generation to select the subsample help description.  */
  double resubsample_arg;	/**< @brief Resubsampling factor compared to the subsampled simulation.  */
  char * resubsample_orig;	/**< @brief Resubsampling factor compared to the subsampled simulation original value given at command line.  */
  const char *resubsample_help; /**< @brief Resubsampling factor compared to the subsampled simulation help description.  */
  int resubsample_seed_arg;	/**< @brief Seed for resubsampling from a subsampled simulation (default='20132011').  */
  char * resubsample_seed_orig;	/**< @brief Seed for resubsampling from a subsampled simulation original value given at command line.  */
  const char *resubsample_seed_help; /**< @brief Seed for resubsampling from a subsampled simulation help description.  */
  int joggleParticles_flag;	/**< @brief Slightly joggle the input particle positions (default=off).  */
  const char *joggleParticles_help; /**< @brief Slightly joggle the input particle positions help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int configFile_given ;	/**< @brief Whether configFile was given.  */
  unsigned int ramsesBase_given ;	/**< @brief Whether ramsesBase was given.  */
  unsigned int ramsesId_given ;	/**< @brief Whether ramsesId was given.  */
  unsigned int gadget_given ;	/**< @brief Whether gadget was given.  */
  unsigned int gadget2_given ;	/**< @brief Whether gadget2 was given.  */
  unsigned int flash_given ;	/**< @brief Whether flash was given.  */
  unsigned int multidark_given ;	/**< @brief Whether multidark was given.  */
  unsigned int sdf_given ;	/**< @brief Whether sdf was given.  */
  unsigned int sdf_splitting_given ;	/**< @brief Whether sdf_splitting was given.  */
  unsigned int axis_given ;	/**< @brief Whether axis was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int outputParameter_given ;	/**< @brief Whether outputParameter was given.  */
  unsigned int rangeX_min_given ;	/**< @brief Whether rangeX_min was given.  */
  unsigned int rangeX_max_given ;	/**< @brief Whether rangeX_max was given.  */
  unsigned int rangeY_min_given ;	/**< @brief Whether rangeY_min was given.  */
  unsigned int rangeY_max_given ;	/**< @brief Whether rangeY_max was given.  */
  unsigned int rangeZ_min_given ;	/**< @brief Whether rangeZ_min was given.  */
  unsigned int rangeZ_max_given ;	/**< @brief Whether rangeZ_max was given.  */
  unsigned int preReShift_given ;	/**< @brief Whether preReShift was given.  */
  unsigned int peculiarVelocities_given ;	/**< @brief Whether peculiarVelocities was given.  */
  unsigned int cosmo_given ;	/**< @brief Whether cosmo was given.  */
  unsigned int subsample_given ;	/**< @brief Whether subsample was given.  */
  unsigned int inputParameter_given ;	/**< @brief Whether inputParameter was given.  */
  unsigned int gadgetUnit_given ;	/**< @brief Whether gadgetUnit was given.  */
  unsigned int subsample_seed_given ;	/**< @brief Whether subsample_seed was given.  */
  unsigned int resubsample_given ;	/**< @brief Whether resubsample was given.  */
  unsigned int resubsample_seed_given ;	/**< @brief Whether resubsample_seed was given.  */
  unsigned int joggleParticles_given ;	/**< @brief Whether joggleParticles was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct generateMock_conf_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure generateMock_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure generateMock_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *generateMock_info_purpose;
/** @brief the usage string of the program */
extern const char *generateMock_info_usage;
/** @brief all the lines making the help output */
extern const char *generateMock_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int generateMock_conf (int argc, char **argv,
  struct generateMock_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use generateMock_conf_ext() instead
 */
int generateMock_conf2 (int argc, char **argv,
  struct generateMock_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int generateMock_conf_ext (int argc, char **argv,
  struct generateMock_info *args_info,
  struct generateMock_conf_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int generateMock_conf_dump(FILE *outfile,
  struct generateMock_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int generateMock_conf_file_save(const char *filename,
  struct generateMock_info *args_info);

/**
 * Print the help
 */
void generateMock_conf_print_help(void);
/**
 * Print the version
 */
void generateMock_conf_print_version(void);

/**
 * Initializes all the fields a generateMock_conf_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void generateMock_conf_params_init(struct generateMock_conf_params *params);

/**
 * Allocates dynamically a generateMock_conf_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized generateMock_conf_params structure
 */
struct generateMock_conf_params *generateMock_conf_params_create(void);

/**
 * Initializes the passed generateMock_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void generateMock_conf_init (struct generateMock_info *args_info);
/**
 * Deallocates the string fields of the generateMock_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void generateMock_conf_free (struct generateMock_info *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use generateMock_conf_config_file() instead
 */
int generateMock_conf_configfile (const char *filename,
  struct generateMock_info *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int generateMock_conf_config_file (const char *filename,
  struct generateMock_info *args_info,
  struct generateMock_conf_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int generateMock_conf_required (struct generateMock_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* GENERATEMOCK_CONF_H */
