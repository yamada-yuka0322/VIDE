/** @file generateFromCatalog_conf.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.5
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef GENERATEFROMCATALOG_CONF_H
#define GENERATEFROMCATALOG_CONF_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef GENERATEFROMCATALOG_CONF_PACKAGE
/** @brief the program name (used for printing errors) */
#define GENERATEFROMCATALOG_CONF_PACKAGE "generateFromCatalog"
#endif

#ifndef GENERATEFROMCATALOG_CONF_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define GENERATEFROMCATALOG_CONF_PACKAGE_NAME "generateFromCatalog"
#endif

#ifndef GENERATEFROMCATALOG_CONF_VERSION
/** @brief the program version */
#define GENERATEFROMCATALOG_CONF_VERSION "alpha"
#endif

/** @brief Where the command line options are stored */
struct generateFromCatalog_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * configFile_arg;	/**< @brief Configuration filename.  */
  char * configFile_orig;	/**< @brief Configuration filename original value given at command line.  */
  const char *configFile_help; /**< @brief Configuration filename help description.  */
  char * catalog_arg;	/**< @brief Input NYU-VAGC catalog.  */
  char * catalog_orig;	/**< @brief Input NYU-VAGC catalog original value given at command line.  */
  const char *catalog_help; /**< @brief Input NYU-VAGC catalog help description.  */
  char * mask_arg;	/**< @brief Healpix mask of unobserved data (in Equatorial coordinates).  */
  char * mask_orig;	/**< @brief Healpix mask of unobserved data (in Equatorial coordinates) original value given at command line.  */
  const char *mask_help; /**< @brief Healpix mask of unobserved data (in Equatorial coordinates) help description.  */
  double density_fake_arg;	/**< @brief Number density of boundary fake tracers (1 h^3/ Mpc^3) (default='1').  */
  char * density_fake_orig;	/**< @brief Number density of boundary fake tracers (1 h^3/ Mpc^3) original value given at command line.  */
  const char *density_fake_help; /**< @brief Number density of boundary fake tracers (1 h^3/ Mpc^3) help description.  */
  double zMin_arg;	/**< @brief Minimum redshift of data.  */
  char * zMin_orig;	/**< @brief Minimum redshift of data original value given at command line.  */
  const char *zMin_help; /**< @brief Minimum redshift of data help description.  */
  double zMax_arg;	/**< @brief Maximum redshift of data.  */
  char * zMax_orig;	/**< @brief Maximum redshift of data original value given at command line.  */
  const char *zMax_help; /**< @brief Maximum redshift of data help description.  */
  char * output_arg;	/**< @brief Filename of particle datafile.  */
  char * output_orig;	/**< @brief Filename of particle datafile original value given at command line.  */
  const char *output_help; /**< @brief Filename of particle datafile help description.  */
  char * params_arg;	/**< @brief Output parameters of the datacube.  */
  char * params_orig;	/**< @brief Output parameters of the datacube original value given at command line.  */
  const char *params_help; /**< @brief Output parameters of the datacube help description.  */
  int useComoving_flag;	/**< @brief Convert to real space using LCDM cosmology (default=off).  */
  const char *useComoving_help; /**< @brief Convert to real space using LCDM cosmology help description.  */
  double omegaM_arg;	/**< @brief Omega Matter for fiducial cosmology (default='0.27').  */
  char * omegaM_orig;	/**< @brief Omega Matter for fiducial cosmology original value given at command line.  */
  const char *omegaM_help; /**< @brief Omega Matter for fiducial cosmology help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int configFile_given ;	/**< @brief Whether configFile was given.  */
  unsigned int catalog_given ;	/**< @brief Whether catalog was given.  */
  unsigned int mask_given ;	/**< @brief Whether mask was given.  */
  unsigned int density_fake_given ;	/**< @brief Whether density_fake was given.  */
  unsigned int zMin_given ;	/**< @brief Whether zMin was given.  */
  unsigned int zMax_given ;	/**< @brief Whether zMax was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int params_given ;	/**< @brief Whether params was given.  */
  unsigned int useComoving_given ;	/**< @brief Whether useComoving was given.  */
  unsigned int omegaM_given ;	/**< @brief Whether omegaM was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct generateFromCatalog_conf_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure generateFromCatalog_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure generateFromCatalog_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *generateFromCatalog_info_purpose;
/** @brief the usage string of the program */
extern const char *generateFromCatalog_info_usage;
/** @brief all the lines making the help output */
extern const char *generateFromCatalog_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int generateFromCatalog_conf (int argc, char **argv,
  struct generateFromCatalog_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use generateFromCatalog_conf_ext() instead
 */
int generateFromCatalog_conf2 (int argc, char **argv,
  struct generateFromCatalog_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int generateFromCatalog_conf_ext (int argc, char **argv,
  struct generateFromCatalog_info *args_info,
  struct generateFromCatalog_conf_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int generateFromCatalog_conf_dump(FILE *outfile,
  struct generateFromCatalog_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int generateFromCatalog_conf_file_save(const char *filename,
  struct generateFromCatalog_info *args_info);

/**
 * Print the help
 */
void generateFromCatalog_conf_print_help(void);
/**
 * Print the version
 */
void generateFromCatalog_conf_print_version(void);

/**
 * Initializes all the fields a generateFromCatalog_conf_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void generateFromCatalog_conf_params_init(struct generateFromCatalog_conf_params *params);

/**
 * Allocates dynamically a generateFromCatalog_conf_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized generateFromCatalog_conf_params structure
 */
struct generateFromCatalog_conf_params *generateFromCatalog_conf_params_create(void);

/**
 * Initializes the passed generateFromCatalog_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void generateFromCatalog_conf_init (struct generateFromCatalog_info *args_info);
/**
 * Deallocates the string fields of the generateFromCatalog_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void generateFromCatalog_conf_free (struct generateFromCatalog_info *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use generateFromCatalog_conf_config_file() instead
 */
int generateFromCatalog_conf_configfile (const char *filename,
  struct generateFromCatalog_info *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int generateFromCatalog_conf_config_file (const char *filename,
  struct generateFromCatalog_info *args_info,
  struct generateFromCatalog_conf_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int generateFromCatalog_conf_required (struct generateFromCatalog_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* GENERATEFROMCATALOG_CONF_H */
