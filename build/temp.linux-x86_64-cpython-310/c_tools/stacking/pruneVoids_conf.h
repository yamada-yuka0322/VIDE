/** @file pruneVoids_conf.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.5
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef PRUNEVOIDS_CONF_H
#define PRUNEVOIDS_CONF_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef PRUNEVOIDS_CONF_PACKAGE
/** @brief the program name (used for printing errors) */
#define PRUNEVOIDS_CONF_PACKAGE "removeEdgeVoids"
#endif

#ifndef PRUNEVOIDS_CONF_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define PRUNEVOIDS_CONF_PACKAGE_NAME "removeEdgeVoids"
#endif

#ifndef PRUNEVOIDS_CONF_VERSION
/** @brief the program version */
#define PRUNEVOIDS_CONF_VERSION "alpha"
#endif

/** @brief Where the command line options are stored */
struct pruneVoids_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * configFile_arg;	/**< @brief Configuration filename.  */
  char * configFile_orig;	/**< @brief Configuration filename original value given at command line.  */
  const char *configFile_help; /**< @brief Configuration filename help description.  */
  char * partFile_arg;	/**< @brief Particle file from generateFromCatalog.  */
  char * partFile_orig;	/**< @brief Particle file from generateFromCatalog original value given at command line.  */
  const char *partFile_help; /**< @brief Particle file from generateFromCatalog help description.  */
  char * extraInfo_arg;	/**< @brief Extra particle file from generateFromCatalog.  */
  char * extraInfo_orig;	/**< @brief Extra particle file from generateFromCatalog original value given at command line.  */
  const char *extraInfo_help; /**< @brief Extra particle file from generateFromCatalog help description.  */
  char * voidDesc_arg;	/**< @brief Void list from ZOBOV.  */
  char * voidDesc_orig;	/**< @brief Void list from ZOBOV original value given at command line.  */
  const char *voidDesc_help; /**< @brief Void list from ZOBOV help description.  */
  char * void2Zone_arg;	/**< @brief Zone file from ZOBOV.  */
  char * void2Zone_orig;	/**< @brief Zone file from ZOBOV original value given at command line.  */
  const char *void2Zone_help; /**< @brief Zone file from ZOBOV help description.  */
  char * partVol_arg;	/**< @brief Particle volume file from ZOBOV.  */
  char * partVol_orig;	/**< @brief Particle volume file from ZOBOV original value given at command line.  */
  const char *partVol_help; /**< @brief Particle volume file from ZOBOV help description.  */
  char * partAdj_arg;	/**< @brief Adjacency file from ZOBOV.  */
  char * partAdj_orig;	/**< @brief Adjacency file from ZOBOV original value given at command line.  */
  const char *partAdj_help; /**< @brief Adjacency file from ZOBOV help description.  */
  char * zone2Part_arg;	/**< @brief Particle file from ZOBOV.  */
  char * zone2Part_orig;	/**< @brief Particle file from ZOBOV original value given at command line.  */
  const char *zone2Part_help; /**< @brief Particle file from ZOBOV help description.  */
  int mockIndex_arg;	/**< @brief Beginning index of mock particles.  */
  char * mockIndex_orig;	/**< @brief Beginning index of mock particles original value given at command line.  */
  const char *mockIndex_help; /**< @brief Beginning index of mock particles help description.  */
  int numVoids_arg;	/**< @brief Number of voids.  */
  char * numVoids_orig;	/**< @brief Number of voids original value given at command line.  */
  const char *numVoids_help; /**< @brief Number of voids help description.  */
  int isObservation_flag;	/**< @brief We are working with observational data (default=off).  */
  const char *isObservation_help; /**< @brief We are working with observational data help description.  */
  int useComoving_flag;	/**< @brief Void positions are in comoving coordinates (default=off).  */
  const char *useComoving_help; /**< @brief Void positions are in comoving coordinates help description.  */
  double omegaM_arg;	/**< @brief Omega_M for redshift convertion (default='0.27').  */
  char * omegaM_orig;	/**< @brief Omega_M for redshift convertion original value given at command line.  */
  const char *omegaM_help; /**< @brief Omega_M for redshift convertion help description.  */
  double zMin_arg;	/**< @brief Minimum redshift of sample (default='0.0').  */
  char * zMin_orig;	/**< @brief Minimum redshift of sample original value given at command line.  */
  const char *zMin_help; /**< @brief Minimum redshift of sample help description.  */
  double zMax_arg;	/**< @brief Maximum redshift of sample (default='10.0').  */
  char * zMax_orig;	/**< @brief Maximum redshift of sample original value given at command line.  */
  const char *zMax_help; /**< @brief Maximum redshift of sample help description.  */
  double rMin_arg;	/**< @brief Minimum allowable void radius (default='0.0').  */
  char * rMin_orig;	/**< @brief Minimum allowable void radius original value given at command line.  */
  const char *rMin_help; /**< @brief Minimum allowable void radius help description.  */
  char * outputDir_arg;	/**< @brief Directory to place outputs.  */
  char * outputDir_orig;	/**< @brief Directory to place outputs original value given at command line.  */
  const char *outputDir_help; /**< @brief Directory to place outputs help description.  */
  char * sampleName_arg;	/**< @brief unique string to assign to outputs.  */
  char * sampleName_orig;	/**< @brief unique string to assign to outputs original value given at command line.  */
  const char *sampleName_help; /**< @brief unique string to assign to outputs help description.  */
  char * periodic_arg;	/**< @brief Set of edges which are periodic (default='xy').  */
  char * periodic_orig;	/**< @brief Set of edges which are periodic original value given at command line.  */
  const char *periodic_help; /**< @brief Set of edges which are periodic help description.  */
  double tolerance_arg;	/**< @brief Fraction of void width to consider edge (default='1.0').  */
  char * tolerance_orig;	/**< @brief Fraction of void width to consider edge original value given at command line.  */
  const char *tolerance_help; /**< @brief Fraction of void width to consider edge help description.  */
  double centralRadFrac_arg;	/**< @brief Fraction of void radii to consider central region (default='4').  */
  char * centralRadFrac_orig;	/**< @brief Fraction of void radii to consider central region original value given at command line.  */
  const char *centralRadFrac_help; /**< @brief Fraction of void radii to consider central region help description.  */
  double maxCentralDen_arg;	/**< @brief Maximum central density to accept as a void (default='0.2').  */
  char * maxCentralDen_orig;	/**< @brief Maximum central density to accept as a void original value given at command line.  */
  const char *maxCentralDen_help; /**< @brief Maximum central density to accept as a void help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int configFile_given ;	/**< @brief Whether configFile was given.  */
  unsigned int partFile_given ;	/**< @brief Whether partFile was given.  */
  unsigned int extraInfo_given ;	/**< @brief Whether extraInfo was given.  */
  unsigned int voidDesc_given ;	/**< @brief Whether voidDesc was given.  */
  unsigned int void2Zone_given ;	/**< @brief Whether void2Zone was given.  */
  unsigned int partVol_given ;	/**< @brief Whether partVol was given.  */
  unsigned int partAdj_given ;	/**< @brief Whether partAdj was given.  */
  unsigned int zone2Part_given ;	/**< @brief Whether zone2Part was given.  */
  unsigned int mockIndex_given ;	/**< @brief Whether mockIndex was given.  */
  unsigned int numVoids_given ;	/**< @brief Whether numVoids was given.  */
  unsigned int isObservation_given ;	/**< @brief Whether isObservation was given.  */
  unsigned int useComoving_given ;	/**< @brief Whether useComoving was given.  */
  unsigned int omegaM_given ;	/**< @brief Whether omegaM was given.  */
  unsigned int zMin_given ;	/**< @brief Whether zMin was given.  */
  unsigned int zMax_given ;	/**< @brief Whether zMax was given.  */
  unsigned int rMin_given ;	/**< @brief Whether rMin was given.  */
  unsigned int outputDir_given ;	/**< @brief Whether outputDir was given.  */
  unsigned int sampleName_given ;	/**< @brief Whether sampleName was given.  */
  unsigned int periodic_given ;	/**< @brief Whether periodic was given.  */
  unsigned int tolerance_given ;	/**< @brief Whether tolerance was given.  */
  unsigned int centralRadFrac_given ;	/**< @brief Whether centralRadFrac was given.  */
  unsigned int maxCentralDen_given ;	/**< @brief Whether maxCentralDen was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct pruneVoids_conf_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure pruneVoids_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure pruneVoids_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *pruneVoids_info_purpose;
/** @brief the usage string of the program */
extern const char *pruneVoids_info_usage;
/** @brief all the lines making the help output */
extern const char *pruneVoids_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int pruneVoids_conf (int argc, char **argv,
  struct pruneVoids_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use pruneVoids_conf_ext() instead
 */
int pruneVoids_conf2 (int argc, char **argv,
  struct pruneVoids_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int pruneVoids_conf_ext (int argc, char **argv,
  struct pruneVoids_info *args_info,
  struct pruneVoids_conf_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int pruneVoids_conf_dump(FILE *outfile,
  struct pruneVoids_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int pruneVoids_conf_file_save(const char *filename,
  struct pruneVoids_info *args_info);

/**
 * Print the help
 */
void pruneVoids_conf_print_help(void);
/**
 * Print the version
 */
void pruneVoids_conf_print_version(void);

/**
 * Initializes all the fields a pruneVoids_conf_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void pruneVoids_conf_params_init(struct pruneVoids_conf_params *params);

/**
 * Allocates dynamically a pruneVoids_conf_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized pruneVoids_conf_params structure
 */
struct pruneVoids_conf_params *pruneVoids_conf_params_create(void);

/**
 * Initializes the passed pruneVoids_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void pruneVoids_conf_init (struct pruneVoids_info *args_info);
/**
 * Deallocates the string fields of the pruneVoids_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void pruneVoids_conf_free (struct pruneVoids_info *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use pruneVoids_conf_config_file() instead
 */
int pruneVoids_conf_configfile (const char *filename,
  struct pruneVoids_info *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int pruneVoids_conf_config_file (const char *filename,
  struct pruneVoids_info *args_info,
  struct pruneVoids_conf_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int pruneVoids_conf_required (struct pruneVoids_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* PRUNEVOIDS_CONF_H */
